using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ApplicationDevelopmentInCS.Lections.Lection7
{
    internal class MainLec7
    {
        // Рефлексия — это способ изучить объект во время работы приложения.

        // Type - предназначен для описания классов, value-типов, массивов, интерфейсов,
        // перечислений, делегатов и обобщений


        // Объект класса Type можно получить двумя способами: использованием оператора typeof(имя_типа) или же object.GetType(). 
        // В первом случае можно сказать что мы получаем тип во время сборки приложения (compile time),
        // а во втором случае мы получаем тип во время работы приложения.

        // Рефлексия позволяет не только получать информацию о различных сущностях,
        // получать доступ к произвольным членам объектов классов, но и создавать классы во время работы приложения.

        // typeof - нельзя использовать для null referens типов. Предназначен для получения инфо о типе,
        // имя кот передается через параметр

        // Статический класс Activator - предназначен для создания объектов в момент выполнения приложения.
        // Класс содержит ряд перегруженных методов CreateInstance, результатом работы которых будет экземпляр требуемого объекта.

        // Атрибут в .Net — это инструмент дополнения сборки метаданными. Атрибуты могут быть применены
        // как к типам(например class или record), так и отдельным его частям(свойствам или методам).

        // Различные инструменты .Net используют атрибуты в целях получения дополнительной информации об особенностях работы с классами,
        // интерфейсами: например при построении Web-API(для маршрутизации запросов клиентов к соответствующим методам контроллеров),
        // при вызове неуправляемого кода(для указания параметров диспетчеризации параметров) и многих других случаях.



        public void Run()
        {
            // var obj = new object();  // есть класс. Нужно получить информацию:

            // вариант 1:
            // Type t1 = obj.GetType();

            // вариант 2
            // Type t2 = typeof(object); // здесь не нужно спрашивать экземпляр

            ////////
            int i = 1;
            int? j = 1;             // это одинаковые записи
            Nullable<int> k = 1;    //
            // Nullable<int> k = null;

            /*Console.WriteLine(i.GetType());
            Console.WriteLine(j.GetType());
            Console.WriteLine(k.GetType()); // с null выполнить уже нельзя

            Type t = typeof(Nullable<>);
            Console.WriteLine(t);*/
            //////////////

            /*Type t = typeof(Tuple<,,>); // просмотр Tuple
            Console.WriteLine(t);*/

            //////////////////////////////////////////////////////////////////
            /// class Type (abstract class)
            /// 
            /////////////////////////////////////////////////////
            ///

        }
    }
}
